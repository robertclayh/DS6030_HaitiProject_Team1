) %>%
drop_na()
return(results)
}
# Apply function to extract values for RGB and CIELab
holdout_data_clustering_rgb <- convert_clustering_to_df(r_pred_rgb, r_diff_rgb, holdout_data)
convert_clustering_to_df <- function(r_pred, r_diff, holdout_data) {
# Convert holdout data to spatial points
holdout_vect <- terra::vect(holdout_data, geom = c("Map X", "Map Y"), crs = "EPSG:32618")
# Extract raster values (.pred_TRUE and clustering metric)
pred_values <- terra::extract(r_pred, holdout_vect, ID = FALSE)
diff_values <- terra::extract(r_diff, holdout_vect, ID = FALSE)
# Combine with original holdout data
results <- holdout_data %>%
mutate(
pred_TRUE = pred_values[, 1],
clustering_metric = diff_values[, 1]
) %>%
drop_na()
return(results)
}
# Apply function to extract values for RGB and CIELab
holdout_data_clustering_rgb <- convert_clustering_to_df(r_pred_rgb, r_diff_rgb, holdout_data)
predict_at_threshold_raster <- function(model, data) {
predictions <- model %>%
augment(data) %>%
select(`Map X`, `Map Y`, .pred_TRUE)  # Ensure only necessary columns are kept
return(predictions)
}
# Apply predictions
logreg_rgb_predictions <- predict_at_threshold_raster(final_logreg_rgb_fit, holdout_data)
#| cache: FALSE
#| message: FALSE
library(doParallel)
cl <- makePSOCKcluster(parallel::detectCores(logical = FALSE))
registerDoParallel(cl)
#| cache: FALSE
#| warning: FALSE
#| message: FALSE
library(tidyverse)
library(tidymodels)
library(discrim)
library(leaflet)
library(terra)
library(htmlwidgets)
library(leafem)
library(colordistance)
library(jpeg)
library(patchwork)
library(probably)
library(gridExtra)
library(plotly)
library(mapview)
library(farver)
library(kableExtra)
library(leaflet.extras2)
library(webshot2)
predict_at_threshold_raster <- function(model, data) {
predictions <- model %>%
augment(data) %>%
select(`Map X`, `Map Y`, .pred_TRUE)  # Ensure only necessary columns are kept
return(predictions)
}
# Apply predictions
logreg_rgb_predictions <- predict_at_threshold_raster(final_logreg_rgb_fit, holdout_data)
load("~/Documents/MSDS/DS6030/DS6030_HaitiProject_Team1/haiti.RData")
#| cache: FALSE
#| message: FALSE
library(doParallel)
cl <- makePSOCKcluster(parallel::detectCores(logical = FALSE))
registerDoParallel(cl)
#| cache: FALSE
#| warning: FALSE
#| message: FALSE
library(tidyverse)
library(tidymodels)
library(discrim)
library(leaflet)
library(terra)
library(htmlwidgets)
library(leafem)
library(colordistance)
library(jpeg)
library(patchwork)
library(probably)
library(gridExtra)
library(plotly)
library(mapview)
library(farver)
library(kableExtra)
library(leaflet.extras2)
library(webshot2)
predict_at_threshold_raster <- function(model, data) {
predictions <- model %>%
augment(data) %>%
select(`Map X`, `Map Y`, .pred_TRUE)  # Ensure only necessary columns are kept
return(predictions)
}
# Apply predictions
logreg_rgb_predictions <- predict_at_threshold_raster(final_logreg_rgb_fit, holdout_data)
logreg_lab_predictions <- predict_at_threshold_raster(final_logreg_lab_fit, holdout_data)
# Convert to spatial vector
logreg_rgb_vect <- vect(logreg_rgb_predictions, geom = c("Map X", "Map Y"), crs = "EPSG:32618")
logreg_lab_vect <- vect(logreg_lab_predictions, geom = c("Map X", "Map Y"), crs = "EPSG:32618")
# Create empty raster
raster_template <- rast(ext(logreg_rgb_vect), resolution = 0.08, crs = "EPSG:32618")
# Rasterize the .pred_TRUE column
r_pred_rgb <- rasterize(logreg_rgb_vect, raster_template, field = ".pred_TRUE")
r_pred_lab <- rasterize(logreg_lab_vect, raster_template, field = ".pred_TRUE")
# Define 3Ã—3 moving window
window_size <- matrix(1, nrow = 3, ncol = 3)
# Compute local mean of .pred_TRUE in 3x3 neighborhood, ignoring NA values
r_local_mean_rgb <- focal(r_pred_rgb, w = window_size, fun = mean, na.policy = "omit")
r_local_mean_lab <- focal(r_pred_lab, w = window_size, fun = mean, na.policy = "omit")
# Compute the difference between each pixel's prediction and the local mean
r_diff_rgb <- r_pred_rgb - r_local_mean_rgb
r_diff_lab <- r_pred_lab - r_local_mean_lab
convert_clustering_to_df <- function(r_pred, r_diff, holdout_data) {
# Convert holdout data to spatial points (ensure correct column names)
holdout_vect <- terra::vect(holdout_data, geom = c("Map X", "Map Y"), crs = "EPSG:32618")
# Extract raster values (.pred_TRUE and clustering metric)
pred_values <- terra::extract(r_pred, holdout_vect, ID = FALSE)
diff_values <- terra::extract(r_diff, holdout_vect, ID = FALSE)
# Combine with original holdout data
results <- holdout_data %>%
mutate(
pred_TRUE = pred_values[, 1],
clustering_metric = diff_values[, 1]
) %>%
drop_na()
return(results)
}
# Apply function to extract values for RGB and CIELab
holdout_data_clustering_rgb <- convert_clustering_to_df(r_pred_rgb, r_diff_rgb, holdout_data)
holdout_data_clustering_lab <- convert_clustering_to_df(r_pred_lab, r_diff_lab, holdout_data)
ggplot(holdout_data_clustering_rgb, aes(x = pred_TRUE, y = clustering_metric)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Clustering Measure (Local Mean Difference)",
title = "Clustering Analysis of Prediction Probabilities (RGB)"
) +
theme_minimal()
ggplot(holdout_data_clustering_lab, aes(x = pred_TRUE, y = clustering_metric)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Clustering Measure (Local Mean Difference)",
title = "Clustering Analysis of Prediction Probabilities (CIELab)"
) +
theme_minimal()
# Compute the absolute difference between each pixel's prediction and the local mean
r_diff_rgb <- abs(r_pred_rgb - r_local_mean_rgb)
r_diff_lab <- abs(r_pred_lab - r_local_mean_lab)
convert_clustering_to_df <- function(r_pred, r_diff, holdout_data) {
# Convert holdout data to spatial points (ensure correct column names)
holdout_vect <- terra::vect(holdout_data, geom = c("Map X", "Map Y"), crs = "EPSG:32618")
# Extract raster values (.pred_TRUE and clustering metric)
pred_values <- terra::extract(r_pred, holdout_vect, ID = FALSE)
diff_values <- terra::extract(r_diff, holdout_vect, ID = FALSE)
# Combine with original holdout data
results <- holdout_data %>%
mutate(
pred_TRUE = pred_values[, 1],
clustering_metric = diff_values[, 1]
) %>%
drop_na()
return(results)
}
# Apply function to extract values for RGB and CIELab
holdout_data_clustering_rgb <- convert_clustering_to_df(r_pred_rgb, r_diff_rgb, holdout_data)
holdout_data_clustering_lab <- convert_clustering_to_df(r_pred_lab, r_diff_lab, holdout_data)
ggplot(holdout_data_clustering_rgb, aes(x = pred_TRUE, y = clustering_metric)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Clustering Measure (Local Mean Difference)",
title = "Clustering Analysis of Prediction Probabilities (RGB)"
) +
theme_minimal()
ggplot(holdout_data_clustering_lab, aes(x = pred_TRUE, y = clustering_metric)) +
geom_point(alpha = 0.3) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Clustering Measure (Local Mean Difference)",
title = "Clustering Analysis of Prediction Probabilities (CIELab)"
) +
theme_minimal()
# Histogram of clustering metric binned by prediction probability (RGB)
ggplot(holdout_data_clustering_rgb, aes(x = pred_TRUE, y = clustering_metric)) +
geom_bin2d(bins = 10) +  # 10 bins for 0.1 increments
scale_fill_viridis_c() +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Clustering Measure (Local Mean Difference)",
title = "Clustering Analysis of Prediction Probabilities (RGB)"
) +
theme_minimal()
# Histogram of clustering metric binned by prediction probability (CIELab)
ggplot(holdout_data_clustering_lab, aes(x = pred_TRUE, y = clustering_metric)) +
geom_bin2d(bins = 10) +  # 10 bins for 0.1 increments
scale_fill_viridis_c() +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Clustering Measure (Local Mean Difference)",
title = "Clustering Analysis of Prediction Probabilities (CIELab)"
) +
theme_minimal()
# Histogram of clustering metric by prediction probability bins (RGB)
ggplot(holdout_data_clustering_rgb, aes(x = pred_TRUE)) +
geom_histogram(binwidth = 0.1, fill = "blue", alpha = 0.6, color = "black") +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Count",
title = "Histogram of Prediction Probabilities (RGB)"
) +
theme_minimal()
# Histogram of clustering metric by prediction probability bins (CIELab)
ggplot(holdout_data_clustering_lab, aes(x = pred_TRUE)) +
geom_histogram(binwidth = 0.1, fill = "blue", alpha = 0.6, color = "black") +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Count",
title = "Histogram of Prediction Probabilities (CIELab)"
) +
theme_minimal()
# Histogram of prediction probabilities (RGB) excluding zero
ggplot(holdout_data_clustering_rgb %>% filter(pred_TRUE > 0), aes(x = pred_TRUE)) +
geom_histogram(binwidth = 0.1, fill = "blue", alpha = 0.6, color = "black") +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Count",
title = "Histogram of Prediction Probabilities (RGB)"
) +
theme_minimal()
# Histogram of prediction probabilities (CIELab) excluding zero
ggplot(holdout_data_clustering_lab %>% filter(pred_TRUE > 0), aes(x = pred_TRUE)) +
geom_histogram(binwidth = 0.1, fill = "blue", alpha = 0.6, color = "black") +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Count",
title = "Histogram of Prediction Probabilities (CIELab)"
) +
theme_minimal()
# Histogram of prediction probabilities (RGB) excluding zero
ggplot(holdout_data_clustering_rgb %>% filter(pred_TRUE > 0.1), aes(x = pred_TRUE)) +
geom_histogram(binwidth = 0.1, fill = "blue", alpha = 0.6, color = "black") +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Count",
title = "Histogram of Prediction Probabilities (RGB)"
) +
theme_minimal()
# Histogram of prediction probabilities (CIELab) excluding zero
ggplot(holdout_data_clustering_lab %>% filter(pred_TRUE > 0.1), aes(x = pred_TRUE)) +
geom_histogram(binwidth = 0.1, fill = "blue", alpha = 0.6, color = "black") +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Count",
title = "Histogram of Prediction Probabilities (CIELab)"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Histogram for predictions between 0 and 0.5 (inclusive)
ggplot(holdout_data_clustering_rgb %>% filter(pred_TRUE >= 0, pred_TRUE <= 0.5), aes(x = pred_TRUE)) +
geom_histogram(binwidth = 0.1, fill = "blue", alpha = 0.6, color = "black") +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Count",
title = "Histogram of Prediction Probabilities (RGB) (0 to 0.5)"
) +
theme_minimal()
# Histogram for predictions between 0.5 and 1 (excluding 1)
ggplot(holdout_data_clustering_rgb %>% filter(pred_TRUE > 0.5, pred_TRUE < 1), aes(x = pred_TRUE)) +
geom_histogram(binwidth = 0.1, fill = "blue", alpha = 0.6, color = "black") +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Count",
title = "Histogram of Prediction Probabilities (RGB) (0.5 to <1)"
) +
theme_minimal()
library(ggplot2)
ggplot(holdout_data_clustering_rgb, aes(x = pred_TRUE, y = clustering_metric)) +
geom_point(alpha = 0.3, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Clustering Measure (Local Mean Difference)",
title = "Correlation between Prediction Probability and Clustering (RGB)"
) +
theme_minimal()
ggplot(holdout_data_clustering_rgb, aes(x = pred_TRUE, y = clustering_metric)) +
geom_point(alpha = 0.3, color = "blue") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "red", se = FALSE) +
labs(
x = "Prediction Probability (.pred_TRUE)",
y = "Clustering Measure (Local Mean Difference)",
title = "Quadratic Relationship between Prediction Probability and Clustering (RGB)"
) +
theme_minimal()
save.image("~/Documents/MSDS/DS6030/DS6030_HaitiProject_Team1/haiti.RData")
# Map X and Map Y
holdout_data_sp <- holdout_data %>%
rename(x = `Map X`, y = `Map Y`)
# Convert to spatial vector
v_utm <- terra::vect(holdout_data_sp, geom = c("x", "y"), crs = "EPSG:32618")
# Create an empty raster
r_empty <- terra::rast(terra::ext(v_utm), resolution = 0.08, crs = "EPSG:32618")
# Rasterize
r_b1 <- terra::rasterize(v_utm, r_empty, field = "Red", overwrite = TRUE)
r_b2 <- terra::rasterize(v_utm, r_empty, field = "Green", overwrite = TRUE)
r_b3 <- terra::rasterize(v_utm, r_empty, field = "Blue", overwrite = TRUE)
# Combine
rgb_raster <- c(r_b1, r_b2, r_b3)
# Reproject to WGS84
rgb_raster_wgs <- terra::project(rgb_raster, "EPSG:4326", overwrite = TRUE)
# Convert to brick
rgb_brick <- raster::brick(rgb_raster_wgs)
# Create the map
m <- leaflet(options = leafletOptions(maxZoom = 25)) %>%
addTiles(options = tileOptions(maxZoom = 25)) %>%
leafem::addRasterRGB(rgb_brick, r = 1, g = 2, b = 3) %>%
# Add scale bar
addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>%
# Add easyPrint button
addEasyprint(options = easyprintOptions(
title = "Print Map",
position = "topright",
exportOnly = TRUE  # Change to FALSE for direct printing
))
Sys.setenv(R_MAX_VSIZE = 32e9)  # Set max vector memory to 32GB
# Create the map
m <- leaflet(options = leafletOptions(maxZoom = 25)) %>%
addTiles(options = tileOptions(maxZoom = 25)) %>%
leafem::addRasterRGB(rgb_brick, r = 1, g = 2, b = 3) %>%
# Add scale bar
addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>%
# Add easyPrint button
addEasyprint(options = easyprintOptions(
title = "Print Map",
position = "topright",
exportOnly = TRUE  # Change to FALSE for direct printing
))
library(stars)
rgb_stars <- st_as_stars(rgb_raster_wgs)
names(rgb_stars) <- c("Red", "Green", "Blue")
# Load required libraries
library(leaflet)
library(leafem)
library(stars)
library(terra)
# Convert terra raster stack to stars object
rgb_stars <- st_as_stars(rgb_raster_wgs)
# Check the structure of the stars object
print(rgb_stars)
# If it's a single array, ensure it's reshaped into multi-band format
if (length(dim(rgb_stars)) == 2) {
rgb_stars <- st_as_stars(
list(Red = rgb_raster_wgs[[1]],
Green = rgb_raster_wgs[[2]],
Blue = rgb_raster_wgs[[3]])
)
}
# Verify bands
names(rgb_stars) <- c("Red", "Green", "Blue")
print(rgb_stars)
# Load raster into memory
rgb_stars <- read_stars(rgb_stars)
# Load required libraries
library(leaflet)
library(leafem)
library(stars)
library(terra)
# Convert terra raster stack to stars object
rgb_stars <- st_as_stars(rgb_raster_wgs)
# Load raster into memory
rgb_stars <- read_stars(rgb_stars)
# Load required libraries
library(leaflet)
library(leafem)
library(stars)
library(terra)
# Convert terra raster stack to stars object
rgb_stars <- st_as_stars(rgb_raster_wgs)
# Assign band names
names(rgb_stars) <- c("Red", "Green", "Blue")
# Load required libraries
library(leaflet)
library(leafem)
library(stars)
library(terra)
# Convert terra raster stack to stars object
rgb_stars <- st_as_stars(rgb_raster_wgs)
# Rename band dimension
rgb_stars <- st_set_dimensions(rgb_stars, 3, values = c("Red", "Green", "Blue"))
# Verify structure
print(rgb_stars)
# Create Leaflet map
m <- leaflet(options = leafletOptions(maxZoom = 25)) %>%
addTiles(options = tileOptions(maxZoom = 25)) %>%
# Add raster image from stars
leafem::addStarsImage(rgb_stars, bands = c("Red", "Green", "Blue")) %>%
# Add scale bar
addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>%
# Add easyPrint button
addEasyprint(options = easyprintOptions(
title = "Print Map",
position = "topright",
exportOnly = TRUE
))
# Load required libraries
library(leaflet)
library(leafem)
library(stars)
library(terra)
# Convert terra raster stack to stars object
rgb_stars <- st_as_stars(rgb_raster_wgs)
# Ensure correct band dimension
rgb_stars <- st_set_dimensions(rgb_stars, "band", values = c("Red", "Green", "Blue"))
# Verify structure
print(rgb_stars)
# Create Leaflet map
m <- leaflet(options = leafletOptions(maxZoom = 25)) %>%
addTiles(options = tileOptions(maxZoom = 25)) %>%
# Add raster image from stars (set correct band order)
leafem::addStarsImage(rgb_stars, bands = 1:3) %>%
# Add scale bar
addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>%
# Add easyPrint button
addEasyprint(options = easyprintOptions(
title = "Print Map",
position = "topright",
exportOnly = TRUE
))
# Load required libraries
library(leaflet)
library(leafem)
library(stars)
library(terra)
# Convert terra raster stack to stars object
rgb_stars <- st_as_stars(rgb_raster_wgs)
# Ensure it has correct band names for Red, Green, and Blue
rgb_stars <- st_set_dimensions(rgb_stars, "band", values = c("Red", "Green", "Blue"))
# Verify structure
print(rgb_stars)
# Create Leaflet map
m <- leaflet(options = leafletOptions(maxZoom = 25)) %>%
addTiles(options = tileOptions(maxZoom = 25)) %>%
# Add raster image from stars, setting the band indices explicitly
leafem::addStarsImage(rgb_stars, band = c(1, 2, 3)) %>%
# Add scale bar
addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>%
# Add easyPrint button
addEasyprint(options = easyprintOptions(
title = "Print Map",
position = "topright",
exportOnly = TRUE
))
# Load required libraries
library(leaflet)
library(leafem)
library(stars)
library(terra)
# Convert terra raster stack to stars object (ensuring correct format)
rgb_stars <- st_as_stars(rgb_raster_wgs)
# Ensure band dimension is correctly labeled
rgb_stars <- st_set_dimensions(rgb_stars, "band", values = c("Red", "Green", "Blue"))
# Verify structure
print(rgb_stars)
# Create Leaflet map
m <- leaflet(options = leafletOptions(maxZoom = 25)) %>%
addTiles(options = tileOptions(maxZoom = 25)) %>%
# Add raster image from stars, specifying RGB bands explicitly
leafem::addStarsImage(rgb_stars, band = 1:3, colors = NULL) %>%
# Add scale bar
addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>%
# Add easyPrint button
addEasyprint(options = easyprintOptions(
title = "Print Map",
position = "topright",
exportOnly = TRUE
))
# Load required libraries
library(leaflet)
library(leafem)
library(stars)
library(terra)
# Convert terra raster stack to stars object (ensuring correct format)
rgb_stars <- st_as_stars(rgb_raster_wgs)
# Ensure band dimension is correctly labeled
rgb_stars <- st_set_dimensions(rgb_stars, "band", values = c("R", "G", "B"))
# Verify structure
print(rgb_stars)
# Create Leaflet map
m <- leaflet(options = leafletOptions(maxZoom = 25)) %>%
addTiles(options = tileOptions(maxZoom = 25)) %>%
# Add raster image from stars, specifying RGB bands explicitly
leafem::addStarsImage(rgb_stars, band = 1:3, colors = NULL) %>%
# Add scale bar
addScaleBar(position = "bottomleft", options = scaleBarOptions(metric = TRUE, imperial = FALSE)) %>%
# Add easyPrint button
addEasyprint(options = easyprintOptions(
title = "Print Map",
position = "topright",
exportOnly = TRUE
))
setwd("~/Documents/MSDS/DS6030/DS6030_HaitiProject_Team1")
